# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18RiYmiQw53z0mvVqpXcrkN1K6sNcIbTv
"""

pip install streamlit vaderSentiment pandas requests

import streamlit as st
import pandas as pd
import requests
import time
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

API_KEY = 'pub_6ac5a2a622a6449199cc89b6bff65d13'
BASE_URL = 'https://newsdata.io/api/1/latest'

def fetch_news(query="a", max_pages=1):
    all_articles = []
    params = {
        'apikey': API_KEY,
        'language': 'en',
        'q': query
    }
    page_token = None
    pages_fetched = 0

    while True:
        if page_token:
            params['page'] = page_token

        response = requests.get(BASE_URL, params=params)
        if response.status_code != 200:
            break

        data = response.json()
        articles = data.get('results', [])
        all_articles.extend(articles)
        pages_fetched += 1

        page_token = data.get('nextPage', None)
        if not page_token or pages_fetched >= max_pages:
            break
        time.sleep(1)  # Respect API rate limits

    return all_articles

def analyze_sentiments(df):
    analyzer = SentimentIntensityAnalyzer()
    def get_sentiment(text):
        score = analyzer.polarity_scores(text)['compound']
        if score >= 0.05:
            return 'Positive'
        elif score <= -0.05:
            return 'Negative'
        return 'Neutral'
    df['sentiment'] = df['title'].fillna('') + '. ' + df['description'].fillna('')
    df['sentiment'] = df['sentiment'].apply(get_sentiment)
    return df

st.title("ðŸ“° Live News Sentiment Dashboard")

if st.button('Update News Now'):
    with st.spinner('Fetching fresh news and analyzing...'):
        articles = fetch_news(query="a", max_pages=2)
        news_df = pd.DataFrame(articles)
        if len(news_df) > 0:
            news_df = analyze_sentiments(news_df)
            st.success(f"Fetched and analyzed {len(news_df)} articles.")
            st.write(news_df[['title', 'sentiment']].head(20))
            st.bar_chart(news_df['sentiment'].value_counts())
        else:
            st.warning("No articles found or API limit reached.")
else:
    st.info("Click the button above to fetch and analyze news in real time.")